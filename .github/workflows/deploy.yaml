run-name: Deploy to ${{ inputs.env }} @ ${{ inputs.ref }}

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "The ref to deploy"
        required: true
        type: string
      env:
        description: "The environment to deploy to"
        required: true
        type: choice
        options:
          - live
          - stage

concurrency:
  group: release-hops-${{ inputs.env }}
  cancel-in-progress: true

jobs:
  build-console:
    name: Build console UI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout & setup
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 19

    - name: Install dependencies
      working-directory: console
      run: |
        # install pnpm
        npm install -g pnpm
        # install dependencies
        pnpm install

    - name: Build project
      working-directory: console
      run: pnpm run build

    - name: Cache the build
      uses: actions/cache/save@v3
      with:
        path: assets/console
        key: ${{ inputs.ref }}-console
  
  release-binary:
    name: Build And Release Binaries
    needs: build-console
    strategy:
      matrix:
        # build and publish in parallel: linux/amd64, linux/arm64, windows/amd64, windows/arm64
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        include:
          - runs-on: ubuntu-latest
            goos: linux
          - runs-on: ubuntu-latest
            goos: windows
          - runs-on: macos-latest
            goos: darwin
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Retrieve cached console build
        uses: actions/cache/restore@v3
        with:
          path: assets/console
          key: ${{ inputs.ref }}-console

      - name: Build
        run: |
          # binary suffix
          export EXT=''
          if [ ${{ matrix.goos }} == 'windows' ]; then
            export EXT='.exe'
          fi
          echo "EXT=$EXT" >> "$GITHUB_ENV"

          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o bin/hops${EXT}

      - name: Set up signing
        if: matrix.goos == 'darwin'
        env:
          APPLE_CODE_SIGNING_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_CODE_SIGNING_CERTIFICATE_P12_BASE64 }}
          APPLE_CODE_SIGNING_CERTIFICATE_P12_PASSWORD: ${{ secrets.APPLE_CODE_SIGNING_CERTIFICATE_P12_PASSWORD }}
        run: |
          .github/scripts/codesign_setup.sh

      - name: Sign MacOS executable
        if: matrix.goos == 'darwin'
        env:
          APPLE_CODE_SIGNING_DEVELOPER_ID: ${{ secrets.APPLE_CODE_SIGNING_DEVELOPER_ID }}
        run: |
          .github/scripts/codesign.sh bin/hops${EXT}

      - name: Prepare for release
        run: |
          mkdir -p zip
          cd bin
          zip ../zip/hops-${{ inputs.ref }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip hops${EXT}
          cd ..

      - name: Sign MacOS zip
        if: matrix.goos == 'darwin'
        env:
          APPLE_CODE_SIGNING_DEVELOPER_ID: ${{ secrets.APPLE_CODE_SIGNING_DEVELOPER_ID }}
        run: |
          .github/scripts/codesign.sh zip/hops-${{ inputs.ref }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip

      - name: Notarize
        if: matrix.goos == 'darwin'
        env:
          APPLE_LOGIN: ${{ secrets.APPLE_LOGIN }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_NOTARYTOOL_PASSWORD: ${{ secrets.APPLE_NOTARYTOOL_PASSWORD }}
        run: |
          .github/scripts/notarize.sh zip/hops-${{ inputs.ref }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip --apple-id ${{ secrets.APPLE_LOGIN }} --team-id ${{ secrets.APPLE_TEAM_ID }} --password ${{ secrets.APPLE_NOTARYTOOL_PASSWORD }}

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.ref }}
          files: |
            zip/*.zip
  
  release-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub registry
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deploy/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: hiphops/hiphops:${{ inputs.ref }},hiphops/hiphops:latest
